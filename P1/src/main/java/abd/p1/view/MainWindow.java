package abd.p1.view;

import abd.p1.view.listElements.questionListCellRender;
import abd.p1.view.listElements.userListCellRender;
import abd.p1.view.observers.mainWindowObserver;
import abd.p1.controller.mainWindowController;
import abd.p1.model.Mensaje;
import abd.p1.model.Pregunta;
import abd.p1.model.Usuario;

import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 * Clase que muestra una ventana para poder realizar todas las operaciones de
 * búsqueda de usuarios, respuesta de preguntas y ver mensajes no leídos..
 *
 * @author Alejandro Huertas Herrero 3ºB.
 */
@SuppressWarnings("serial")
public class MainWindow extends javax.swing.JDialog implements mainWindowObserver
{

    private mainWindowController controller;
    private DefaultListModel<Usuario> users;
    private DefaultListModel<Pregunta> questions;
    private HTMLEditorKit kit;
    private HTMLDocument doc;

    public MainWindow(javax.swing.JDialog parent, boolean modal, mainWindowController controller)
    {
        super(parent, modal);

        users = new DefaultListModel<>();
        questions = new DefaultListModel<>();
        kit = new HTMLEditorKit();
        doc = new HTMLDocument();

        initComponents();

        usersList.setCellRenderer(new userListCellRender());
        questionsList.setCellRenderer(new questionListCellRender());

        this.controller = controller;
        this.controller.setObserver(this);
        this.controller.getAllUsers();
        this.controller.getBestQuestion();
        this.controller.getNonReadMessages();

        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jScrollPane5 = new javax.swing.JScrollPane();
        jEditorPane2 = new javax.swing.JEditorPane();
        tabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersList = new javax.swing.JList<Usuario>();
        filterNameButton = new javax.swing.JRadioButton();
        filterJustFriendsButton = new javax.swing.JRadioButton();
        nameTextField = new javax.swing.JTextField();
        modifyProfileButton = new javax.swing.JButton();
        seeSelectedProfile = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        questionsList = new javax.swing.JList<Pregunta>();
        answerButton = new javax.swing.JButton();
        randomQuestionButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        markAsReadButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        messagesArea = new javax.swing.JTextPane();

        jButton1.setText("jButton1");

        jScrollPane4.setViewportView(jEditorPane1);

        jScrollPane5.setViewportView(jEditorPane2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Bienvenido al panel principal!");
        setResizable(false);

        tabbedPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tabbedPane.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        tabbedPane.setName("Usuarios"); // NOI18N

        usersList.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        usersList.setModel(users);
        jScrollPane1.setViewportView(usersList);

        filterNameButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        filterNameButton.setMnemonic('F');
        filterNameButton.setText("Filtrar por nombre:");
        filterNameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterNameButtonActionPerformed(evt);
            }
        });

        filterJustFriendsButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        filterJustFriendsButton.setMnemonic('M');
        filterJustFriendsButton.setText("Mostrar sólo amigos");
        filterJustFriendsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterJustFriendsButtonActionPerformed(evt);
            }
        });

        nameTextField.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        nameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nameTextFieldKeyReleased(evt);
            }
        });

        modifyProfileButton.setBackground(new java.awt.Color(0, 173, 255));
        modifyProfileButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        modifyProfileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ModifyProfileIcon.png"))); // NOI18N
        modifyProfileButton.setMnemonic('M');
        modifyProfileButton.setText("Modificar mi perfil");
        modifyProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyProfileButtonActionPerformed(evt);
            }
        });

        seeSelectedProfile.setBackground(new java.awt.Color(255, 170, 0));
        seeSelectedProfile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SeeProfileIcon.png"))); // NOI18N
        seeSelectedProfile.setMnemonic('V');
        seeSelectedProfile.setText("Ver perfil seleccionado");
        seeSelectedProfile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seeSelectedProfileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(filterJustFriendsButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(filterNameButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(nameTextField)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(modifyProfileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seeSelectedProfile)
                .addGap(73, 73, 73))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterNameButton)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterJustFriendsButton)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modifyProfileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(seeSelectedProfile, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Usuarios", jPanel1);

        jPanel3.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Comic Sans MS", 3, 18)); // NOI18N
        jLabel1.setText("Mejor valoradas:");

        questionsList.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        questionsList.setModel(questions
        );
        jScrollPane2.setViewportView(questionsList);

        answerButton.setBackground(new java.awt.Color(0, 255, 76));
        answerButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        answerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AnswerIcon.png"))); // NOI18N
        answerButton.setMnemonic('R');
        answerButton.setText("Responder");
        answerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                answerButtonActionPerformed(evt);
            }
        });

        randomQuestionButton.setBackground(new java.awt.Color(255, 215, 0));
        randomQuestionButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/RandomIcon.png"))); // NOI18N
        randomQuestionButton.setText("Pregunta aleatoria");
        randomQuestionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomQuestionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel1))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(106, 106, 106)
                                .addComponent(answerButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(randomQuestionButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(randomQuestionButton)
                    .addComponent(answerButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Preguntas", jPanel3);

        markAsReadButton.setBackground(new java.awt.Color(0, 255, 165));
        markAsReadButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        markAsReadButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AcceptIcon.png"))); // NOI18N
        markAsReadButton.setText("Marcar todos como leídos");
        markAsReadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markAsReadButtonActionPerformed(evt);
            }
        });

        messagesArea.setEditable(false);
        messagesArea.setContentType("<html>");
        messagesArea.setDocument(doc);
        messagesArea.setEditorKit(kit);
        messagesArea.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                messagesAreaHyperlinkUpdate(evt);
            }
        });
        jScrollPane6.setViewportView(messagesArea);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(markAsReadButton)
                .addGap(0, 152, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(markAsReadButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Mensajes no leídos", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 502, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 454, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterJustFriendsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterJustFriendsButtonActionPerformed

        if (filterJustFriendsButton.isSelected())
            controller.getFriends();
        else if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && !filterJustFriendsButton.isSelected())
            controller.getFilterUsers(nameTextField.getText());
        else
            controller.getAllUsers();
    }//GEN-LAST:event_filterJustFriendsButtonActionPerformed

    private void modifyProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyProfileButtonActionPerformed
        controller.updateProfile(this);
    }//GEN-LAST:event_modifyProfileButtonActionPerformed

    private void seeSelectedProfileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seeSelectedProfileActionPerformed

        if (usersList.getSelectedValue() != null)
            controller.seeProfile(usersList.getSelectedValue(), this);
        else
            JOptionPane.showMessageDialog(null, "Debes seleccionar un usuario.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));

        usersList.clearSelection();
    }//GEN-LAST:event_seeSelectedProfileActionPerformed

    private void answerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_answerButtonActionPerformed

        if (questionsList.getSelectedValue() == null)
            JOptionPane.showMessageDialog(null, "Debes seleccionar una pregunta.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));
        else
        {
            controller.answerQuestion(questionsList.getSelectedValue(), this);
            questionsList.clearSelection();
            controller.getBestQuestion();
        }
    }//GEN-LAST:event_answerButtonActionPerformed

    private void randomQuestionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomQuestionButtonActionPerformed

        controller.randomQuestion(this);
        controller.getBestQuestion();
    }//GEN-LAST:event_randomQuestionButtonActionPerformed

    private void markAsReadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markAsReadButtonActionPerformed

        controller.markAllAsRead();
        messagesArea.setText("");
    }//GEN-LAST:event_markAsReadButtonActionPerformed

    private void nameTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTextFieldKeyReleased

        if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && !filterJustFriendsButton.isSelected() && !filterNameButton.isSelected())
            controller.getFilterUsers(nameTextField.getText());
        else if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && filterJustFriendsButton.isSelected() && filterNameButton.isSelected())
            controller.getFilterFriends(nameTextField.getText());
        else if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && !filterJustFriendsButton.isSelected() && filterNameButton.isSelected())
            controller.getFilterUsers(nameTextField.getText());
        else if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && filterJustFriendsButton.isSelected() && !filterNameButton.isSelected())
            controller.getFriends();
        else if (filterJustFriendsButton.isSelected() && filterNameButton.isSelected())
            controller.getFriends();
        else
            controller.getAllUsers();
    }//GEN-LAST:event_nameTextFieldKeyReleased

    private void messagesAreaHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)//GEN-FIRST:event_messagesAreaHyperlinkUpdate
    {//GEN-HEADEREND:event_messagesAreaHyperlinkUpdate
        if (evt.getEventType() == HyperlinkEvent.EventType.ACTIVATED)
        {
            String friend = evt.getDescription().substring(0, 5);

            if (friend.equals("amigo"))
                controller.getUser(evt.getDescription().substring(6, evt.getDescription().length()), this);
            else
                controller.getQuestion(evt.getDescription().substring(5, evt.getDescription().length()), this);
        }
    }//GEN-LAST:event_messagesAreaHyperlinkUpdate

    private void filterNameButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_filterNameButtonActionPerformed
    {//GEN-HEADEREND:event_filterNameButtonActionPerformed
        if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && filterJustFriendsButton.isSelected() && filterNameButton.isSelected())
            controller.getFilterFriends(nameTextField.getText());
        else if (nameTextField.getText() != null && !nameTextField.getText().trim().isEmpty() && filterJustFriendsButton.isSelected() && !filterNameButton.isSelected())
            controller.getFriends();
    }//GEN-LAST:event_filterNameButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton answerButton;
    private javax.swing.JRadioButton filterJustFriendsButton;
    private javax.swing.JRadioButton filterNameButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JEditorPane jEditorPane2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton markAsReadButton;
    private javax.swing.JTextPane messagesArea;
    private javax.swing.JButton modifyProfileButton;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JList<Pregunta> questionsList;
    private javax.swing.JButton randomQuestionButton;
    private javax.swing.JButton seeSelectedProfile;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JList<Usuario> usersList;
    // End of variables declaration//GEN-END:variables

    @Override
    public void showUsers(List<Usuario> usersList)
    {
        users.clear();

        for (Usuario u : usersList)
        {
            users.addElement(u);
        }
    }

    @Override
    public void showQuestions(List<Pregunta> questionsList)
    {
        questions.clear();

        for (Pregunta p : questionsList)
        {
            questions.addElement(p);
        }
    }

    @Override
    public void showNonReadMessages(List<Mensaje> messagesList)
    {
        StringBuilder buffer = new StringBuilder();

        for (Mensaje m : messagesList)
        {
            buffer.append(m.getFormatText());
        }

        messagesArea.setText(buffer.toString());
    }
}