package abd.p1.view;

import abd.p1.view.observers.profileEditorObserver;
import javax.swing.ImageIcon;

import abd.p1.controller.profileEditorController;
import abd.p1.model.Genero;
import abd.p1.model.Usuario;

import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;

import java.io.ByteArrayOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;

import java.time.LocalDate;
import java.time.temporal.ChronoUnit;

import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.imageio.ImageIO;

import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;

import org.apache.commons.io.IOUtils;

/**
 * Clase que muestra una ventana para modificar los datos del perfil del usuario
 * que está conectado en la app.
 *
 * @author Alejandro Huertas Herrero 3ºB.
 */
@SuppressWarnings("serial")
public class ProfileEditor extends javax.swing.JDialog implements profileEditorObserver
{
    private profileEditorController controller;
    private DefaultListModel<String> hobbies;

    public ProfileEditor(javax.swing.JDialog parent, boolean modal, profileEditorController controller)
    {
        super(parent, modal);

        hobbies = new DefaultListModel<>();

        initComponents();

        this.controller = controller;
        this.controller.setObserver(this);
        this.controller.showUser();

        setLocationRelativeTo(parent);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jButton9 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        iconLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        ageLabel = new javax.swing.JLabel();
        changeNameButton = new javax.swing.JButton();
        changeIconButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        descriptionJText = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        hobbiesList = new javax.swing.JList<>();
        addHobbieButton = new javax.swing.JButton();
        deleteHobbieButton = new javax.swing.JButton();
        editHobbieButton = new javax.swing.JButton();
        changeGendreButton = new javax.swing.JButton();
        changePreferencesButton = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        changePassButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        saveChangesButton = new javax.swing.JButton();
        gendreLabel = new javax.swing.JLabel();
        preferencesLabel = new javax.swing.JLabel();
        bornDateChooser = new com.toedter.calendar.JDateChooser();

        jButton9.setText("jButton9");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edita tu perfil");
        setResizable(false);

        iconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        iconLabel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        nameLabel.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        nameLabel.setForeground(new java.awt.Color(0, 0, 0));
        nameLabel.setText("Name");

        ageLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        ageLabel.setForeground(new java.awt.Color(0, 0, 0));
        ageLabel.setText("No hay datos de la edad.");

        changeNameButton.setBackground(new java.awt.Color(0, 136, 255));
        changeNameButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        changeNameButton.setForeground(new java.awt.Color(0, 0, 0));
        changeNameButton.setMnemonic('C');
        changeNameButton.setText("Cambiar nombre");
        changeNameButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                changeNameButtonActionPerformed(evt);
            }
        });

        changeIconButton.setBackground(new java.awt.Color(0, 136, 255));
        changeIconButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        changeIconButton.setForeground(new java.awt.Color(0, 0, 0));
        changeIconButton.setMnemonic('C');
        changeIconButton.setText("Cambiar avatar");
        changeIconButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                changeIconButtonActionPerformed(evt);
            }
        });

        descriptionJText.setColumns(20);
        descriptionJText.setRows(5);
        jScrollPane1.setViewportView(descriptionJText);

        jLabel4.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Descripción:");

        jLabel5.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Aficiones:");

        hobbiesList.setBackground(new java.awt.Color(255, 255, 255));
        hobbiesList.setModel(hobbies);
        jScrollPane2.setViewportView(hobbiesList);

        addHobbieButton.setBackground(new java.awt.Color(0, 136, 255));
        addHobbieButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        addHobbieButton.setForeground(new java.awt.Color(0, 0, 0));
        addHobbieButton.setMnemonic('A');
        addHobbieButton.setText("Añadir afición");
        addHobbieButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addHobbieButtonActionPerformed(evt);
            }
        });

        deleteHobbieButton.setBackground(new java.awt.Color(0, 136, 255));
        deleteHobbieButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        deleteHobbieButton.setForeground(new java.awt.Color(0, 0, 0));
        deleteHobbieButton.setMnemonic('E');
        deleteHobbieButton.setText("Eleminar seleccionada");
        deleteHobbieButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteHobbieButtonActionPerformed(evt);
            }
        });

        editHobbieButton.setBackground(new java.awt.Color(0, 136, 255));
        editHobbieButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        editHobbieButton.setForeground(new java.awt.Color(0, 0, 0));
        editHobbieButton.setMnemonic('E');
        editHobbieButton.setText("Editar seleccionada");
        editHobbieButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                editHobbieButtonActionPerformed(evt);
            }
        });

        changeGendreButton.setBackground(new java.awt.Color(0, 136, 255));
        changeGendreButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        changeGendreButton.setForeground(new java.awt.Color(0, 0, 0));
        changeGendreButton.setMnemonic('C');
        changeGendreButton.setText("Cambiar sexo");
        changeGendreButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                changeGendreButtonActionPerformed(evt);
            }
        });

        changePreferencesButton.setBackground(new java.awt.Color(0, 136, 255));
        changePreferencesButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        changePreferencesButton.setForeground(new java.awt.Color(0, 0, 0));
        changePreferencesButton.setMnemonic('C');
        changePreferencesButton.setText("Cambiar preferencia");
        changePreferencesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                changePreferencesButtonActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Sexo:");

        jLabel7.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Busca:");

        changePassButton.setBackground(new java.awt.Color(255, 89, 0));
        changePassButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        changePassButton.setForeground(new java.awt.Color(0, 0, 0));
        changePassButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ChangePassWordIcon.png"))); // NOI18N
        changePassButton.setMnemonic('C');
        changePassButton.setText("Cambiar contraseña");
        changePassButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                changePassButtonActionPerformed(evt);
            }
        });

        cancelButton.setBackground(new java.awt.Color(255, 0, 0));
        cancelButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        cancelButton.setForeground(new java.awt.Color(0, 0, 0));
        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/CancelIcon.png"))); // NOI18N
        cancelButton.setMnemonic('C');
        cancelButton.setText("Cancelar");
        cancelButton.setToolTipText("C");
        cancelButton.setActionCommand("");
        cancelButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cancelButtonActionPerformed(evt);
            }
        });

        saveChangesButton.setBackground(new java.awt.Color(0, 255, 69));
        saveChangesButton.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        saveChangesButton.setForeground(new java.awt.Color(0, 0, 0));
        saveChangesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SaveChangesIcon.png"))); // NOI18N
        saveChangesButton.setMnemonic('G');
        saveChangesButton.setText("Guardar cambios");
        saveChangesButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                saveChangesButtonActionPerformed(evt);
            }
        });

        gendreLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        gendreLabel.setForeground(new java.awt.Color(0, 0, 0));

        preferencesLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 12)); // NOI18N
        preferencesLabel.setForeground(new java.awt.Color(0, 0, 0));

        bornDateChooser.setBackground(new java.awt.Color(0, 106, 255));
        bornDateChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener()
        {
            public void propertyChange(java.beans.PropertyChangeEvent evt)
            {
                bornDateChooserPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane2)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel5)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel6)
                                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                            .addComponent(gendreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                            .addComponent(preferencesLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 91, Short.MAX_VALUE))))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(changePassButton, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(424, 424, 424)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(saveChangesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(changePreferencesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(changeGendreButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteHobbieButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(editHobbieButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addHobbieButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(524, 524, 524)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(changeIconButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(bornDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 263, Short.MAX_VALUE)
                                    .addComponent(changeNameButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(16, 16, 16))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ageLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(iconLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameLabel)
                            .addComponent(changeNameButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ageLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(bornDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(changeIconButton)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addHobbieButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(deleteHobbieButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(editHobbieButton)))
                                .addGap(26, 26, 26)
                                .addComponent(changeGendreButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel6)
                                .addComponent(gendreLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(changePreferencesButton))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel7)
                        .addComponent(preferencesLabel)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveChangesButton)
                    .addComponent(changePassButton))
                .addGap(10, 10, 10))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void editHobbieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHobbieButtonActionPerformed

        if (hobbiesList.getSelectedValue() != null)
        {
            JTextField text = new JTextField();
            text.setText(hobbiesList.getSelectedValue());

            JOptionPane.showMessageDialog(null, text, "Edita la aficón", JOptionPane.QUESTION_MESSAGE,
                    new javax.swing.ImageIcon(getClass().getResource("/EditIcon.png")));

            if (!hobbies.contains(text.getText().toUpperCase()))
                hobbies.set(hobbiesList.getSelectedIndex(), text.getText());
            else
                JOptionPane.showMessageDialog(null, "Afición ya introducida.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));
        }
        else
            JOptionPane.showMessageDialog(null, "Debes seleccionar una afición.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));

        hobbiesList.clearSelection();
    }//GEN-LAST:event_editHobbieButtonActionPerformed

    private void changeNameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeNameButtonActionPerformed

        JTextField text = new JTextField();
        text.setText(nameLabel.getText());

        JOptionPane.showMessageDialog(null, text, "Cambia tu nombre", JOptionPane.QUESTION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/EditIcon.png")));

        nameLabel.setText(text.getText());
    }//GEN-LAST:event_changeNameButtonActionPerformed

    private void changeIconButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeIconButtonActionPerformed

        JFileChooser fc = new JFileChooser();
        InputStream is;

        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
        {
            try
            {
                is = new FileInputStream(fc.getSelectedFile());

                Image image = null;

                try
                {
                    image = ImageIO.read(is);
                }
                catch (IOException ex)
                {
                    Logger.getLogger(ProfileEditor.class.getName()).log(Level.SEVERE, null, ex);
                }

                iconLabel.setIcon(new ImageIcon(image));
            }
            catch (FileNotFoundException ex)
            {
                Logger.getLogger(ProfileEditor.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Archivo no encontrado");
            }
        }
    }//GEN-LAST:event_changeIconButtonActionPerformed

    private void addHobbieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHobbieButtonActionPerformed

        JTextField text = new JTextField();

        JOptionPane.showMessageDialog(null, text, "Añade la afición", JOptionPane.QUESTION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/EditIcon.png")));

        if (text.getText() != "" && !hobbies.contains(text.getText().toUpperCase()))
            hobbies.addElement(text.getText().toUpperCase());
        else
            JOptionPane.showMessageDialog(null, "Afición ya introducida.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));

    }//GEN-LAST:event_addHobbieButtonActionPerformed

    private void deleteHobbieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHobbieButtonActionPerformed

        if (hobbiesList.getSelectedValue() != null)
            hobbies.remove(hobbiesList.getSelectedIndex());
        else
            JOptionPane.showMessageDialog(null, "Debes seleccionar una afición.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));

        hobbiesList.repaint();
    }//GEN-LAST:event_deleteHobbieButtonActionPerformed

    private void changeGendreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeGendreButtonActionPerformed

        JComboBox<Genero> jcb = new JComboBox<>();
        jcb.addItem(Genero.MUJER);
        jcb.addItem(Genero.HOMBRE);
        jcb.setSelectedItem(Genero.getGenero(gendreLabel.getText()));

        JOptionPane.showMessageDialog(null, jcb, "Selecciona tu género.", JOptionPane.QUESTION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/GendreIcon.png")));

        gendreLabel.setText(jcb.getSelectedItem().toString());
    }//GEN-LAST:event_changeGendreButtonActionPerformed

    private void changePreferencesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePreferencesButtonActionPerformed

        JComboBox<Genero> jcb = new JComboBox<>();
        jcb.addItem(Genero.MUJER);
        jcb.addItem(Genero.HOMBRE);
        jcb.addItem(Genero.AMBOS);
        jcb.setSelectedItem(Genero.getGenero(preferencesLabel.getText()));

        JOptionPane.showMessageDialog(null, jcb, "Selecciona tus preferencias.", JOptionPane.QUESTION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/GendreIcon.png")));

        preferencesLabel.setText(jcb.getSelectedItem().toString());
    }//GEN-LAST:event_changePreferencesButtonActionPerformed

    private void saveChangesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveChangesButtonActionPerformed

        String name = nameLabel.getText(), description = descriptionJText.getText();
        byte[] userIcon = getIcon((ImageIcon) iconLabel.getIcon());
        Date bornDate = bornDateChooser.getDate();
        Set<String> userHobbies = new HashSet<>();
        Genero gendre, preferences;

        for (int i = 0; i < hobbies.size(); i++)
        {
            userHobbies.add(hobbies.get(i));
        }

        if (name == "")
            JOptionPane.showMessageDialog(null, "Debes introducir un nombre.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));

        else if (gendreLabel.getText() == "" || preferencesLabel.getText() == "")
            JOptionPane.showMessageDialog(null, "Debes introducir género y preferencias.", "Error", JOptionPane.ERROR_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/ErrorIcon.png")));

        else
        {
            gendre = Genero.getGenero(gendreLabel.getText());
            preferences = Genero.getGenero(preferencesLabel.getText());

            controller.updateProfile(name, bornDate, userIcon, userHobbies, gendre, preferences, description);

            setVisible(false);
        }
    }//GEN-LAST:event_saveChangesButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    @SuppressWarnings("deprecation")
	private void changePassButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changePassButtonActionPerformed

        JPasswordField text = new JPasswordField();

        JOptionPane.showMessageDialog(null, text, "Cambia tu contraseña", JOptionPane.QUESTION_MESSAGE,
                new javax.swing.ImageIcon(getClass().getResource("/EditIcon.png")));

        controller.changePassWord(text.getText());
    }//GEN-LAST:event_changePassButtonActionPerformed

    private void bornDateChooserPropertyChange(java.beans.PropertyChangeEvent evt)//GEN-FIRST:event_bornDateChooserPropertyChange
    {//GEN-HEADEREND:event_bornDateChooserPropertyChange
        Date bornDate = this.bornDateChooser.getDate();

        if (bornDate != null)
            ageLabel.setText(String.valueOf(calculateAge(bornDate)) + " años.");
    }//GEN-LAST:event_bornDateChooserPropertyChange

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHobbieButton;
    private javax.swing.JLabel ageLabel;
    private com.toedter.calendar.JDateChooser bornDateChooser;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton changeGendreButton;
    private javax.swing.JButton changeIconButton;
    private javax.swing.JButton changeNameButton;
    private javax.swing.JButton changePassButton;
    private javax.swing.JButton changePreferencesButton;
    private javax.swing.JButton deleteHobbieButton;
    private javax.swing.JTextArea descriptionJText;
    private javax.swing.JButton editHobbieButton;
    private javax.swing.JLabel gendreLabel;
    private javax.swing.JList<String> hobbiesList;
    private javax.swing.JLabel iconLabel;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel preferencesLabel;
    private javax.swing.JButton saveChangesButton;
    // End of variables declaration//GEN-END:variables

    @Override
    public void showUserInformation(Usuario user)
    {
        iconLabel.setIcon(new ImageIcon(user.getAvatar()));

        nameLabel.setText(user.getNombre());

        if (user.getFecha_nacimiento() != null)
        {
            bornDateChooser.setDate(user.getFecha_nacimiento());
            ageLabel.setText(String.valueOf(user.calculateAge(user.getFecha_nacimiento())) + " años.");
        }

        if (user.getGenero() != null && user.getGenero_interes() != null)
        {
            gendreLabel.setText(user.getGenero().toString());
            preferencesLabel.setText(user.getGenero_interes().toString());
        }

        controller.getHobbies(user);

        descriptionJText.setText(user.getDescripcion());
    }

    private BufferedImage createBufferedImageFrom(final Image image)
    {
        if (image instanceof BufferedImage)
        {
            return (BufferedImage) image;
        }
        else
        {
            final BufferedImage bi = new BufferedImage(image.getWidth(null), image.getHeight(null),
                    BufferedImage.TYPE_INT_RGB);
            final Graphics2D g2 = bi.createGraphics();
            g2.drawImage(image, 0, 0, null);
            return bi;
        }
    }

    private byte[] getIcon(ImageIcon icon)
    {
        Image image = icon.getImage();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        try
        {
            final BufferedImage bufferedImage = createBufferedImageFrom(image);
            ImageIO.write(bufferedImage, "png", baos);
        }
        catch (IOException ex)
        {
            Logger.getLogger(ProfileEditor.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally
        {
            IOUtils.closeQuietly(baos);
        }

        return baos.toByteArray();
    }

    @Override
    public void showUserHobbies(Set<String> hobbies)
    {
        this.hobbies.clear();
        hobbiesList.removeAll();

        for (String s : hobbies)
        {
            this.hobbies.addElement(s);
        }

        hobbiesList.clearSelection();
    }

    @SuppressWarnings("deprecation")
	private static long calculateAge(Date date)
    {
        String dateString = date.toString();

        int year = date.getYear() + 1900, currentYear = Calendar.getInstance().get(Calendar.YEAR);
        int day = Integer.parseInt(dateString.substring(8, 10)), currentDay = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);
        int month = date.getMonth() + 1, currentMonth = Calendar.getInstance().get(Calendar.MONTH) + 1;

        LocalDate startDate = LocalDate.of(year, month, day);
        LocalDate endDate = LocalDate.of(currentYear, currentMonth, currentDay);

        return ChronoUnit.YEARS.between(startDate, endDate);
    }
}